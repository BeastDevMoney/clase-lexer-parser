#name "arith.cool"
 LPAREN
 '*' 
 '*' 
 TYPEID A
 OBJECTID contribution
 OBJECTID from
 TYPEID Anne
 TYPEID Sheets
 LPAREN
 OBJECTID sheets
 '@' 
 OBJECTID cory
 RPAREN
 '*' 
 '*' 
 TYPEID Tests
 OBJECTID the
 OBJECTID arithmetic
 OBJECTID operations
 OBJECTID and
 OBJECTID various
 OBJECTID other
 OBJECTID things
 ERROR "Unmatched *)"
 CLASS
 TYPEID A
 LBRACE
 OBJECTID var
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 ';' 
 OBJECTID value
 LPAREN
 RPAREN
 ':' 
 TYPEID Int
 LBRACE
 OBJECTID var
 RBRACE
 ';' 
 OBJECTID set_var
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID SELF_TYPE
 LBRACE
 LBRACE
 OBJECTID var
 ASSIGN
 OBJECTID num
 ';' 
 OBJECTID self
 ';' 
 RBRACE
 RBRACE
 ';' 
 OBJECTID method1
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID SELF_TYPE
 LBRACE
 OBJECTID self
 RBRACE
 ';' 
 OBJECTID method2
 LPAREN
 OBJECTID num1
 ':' 
 TYPEID Int
 ',' 
 OBJECTID num2
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID B
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num1
 '+' 
 OBJECTID num2
 ';' 
 LPAREN
 NEW
 TYPEID B
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 OBJECTID method3
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID C
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 '~' 
 OBJECTID num
 ';' 
 LPAREN
 NEW
 TYPEID C
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 OBJECTID method4
 LPAREN
 OBJECTID num1
 ':' 
 TYPEID Int
 ',' 
 OBJECTID num2
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID D
 LBRACE
 IF
 OBJECTID num2
 '<' 
 OBJECTID num1
 THEN
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num1
 '-' 
 OBJECTID num2
 ';' 
 LPAREN
 NEW
 TYPEID D
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 ELSE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num2
 '-' 
 OBJECTID num1
 ';' 
 LPAREN
 NEW
 TYPEID D
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 FI
 RBRACE
 ';' 
 OBJECTID method5
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID E
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 1
 IN
 LBRACE
 LPAREN
 LET
 OBJECTID y
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 1
 IN
 WHILE
 OBJECTID y
 LE
 OBJECTID num
 LOOP
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID x
 '*' 
 OBJECTID y
 ';' 
 OBJECTID y
 ASSIGN
 OBJECTID y
 '+' 
 INT_CONST 1
 ';' 
 RBRACE
 POOL
 RPAREN
 ';' 
 LPAREN
 NEW
 TYPEID E
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 RBRACE
 ';' 
 CLASS
 TYPEID B
 INHERITS
 TYPEID A
 LBRACE
 OBJECTID method5
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID E
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num
 '*' 
 OBJECTID num
 ';' 
 LPAREN
 NEW
 TYPEID E
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 RBRACE
 ';' 
 CLASS
 TYPEID C
 INHERITS
 TYPEID B
 LBRACE
 OBJECTID method6
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID A
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 '~' 
 OBJECTID num
 ';' 
 LPAREN
 NEW
 TYPEID A
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 OBJECTID method5
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID E
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num
 '*' 
 OBJECTID num
 '*' 
 OBJECTID num
 ';' 
 LPAREN
 NEW
 TYPEID E
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 RBRACE
 ';' 
 CLASS
 TYPEID D
 INHERITS
 TYPEID B
 LBRACE
 OBJECTID method7
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID Bool
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID num
 IN
 IF
 OBJECTID x
 '<' 
 INT_CONST 0
 THEN
 OBJECTID method7
 LPAREN
 '~' 
 OBJECTID x
 RPAREN
 ELSE
 IF
 INT_CONST 0
 '=' 
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 1
 '=' 
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 IF
 INT_CONST 2
 '=' 
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID method7
 LPAREN
 OBJECTID x
 '-' 
 INT_CONST 3
 RPAREN
 FI
 FI
 FI
 FI
 RPAREN
 RBRACE
 ';' 
 RBRACE
 ';' 
 CLASS
 TYPEID E
 INHERITS
 TYPEID D
 LBRACE
 OBJECTID method6
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID A
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 OBJECTID num
 '/' 
 INT_CONST 8
 ';' 
 LPAREN
 NEW
 TYPEID A
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 RBRACE
 ';' 
 LPAREN
 '*' 
 TYPEID The
 OBJECTID following
 OBJECTID code
 OBJECTID is
 OBJECTID from
 OBJECTID atoi
 '.' 
 OBJECTID cl
 IN
 '~' 
 OBJECTID cs164
 '/' 
 OBJECTID examples
 ERROR "Unmatched *)"
 LPAREN
 '*' 
 TYPEID The
 CLASS
 TYPEID A2I
 OBJECTID provides
 OBJECTID integer
 '-' 
 OBJECTID to
 '-' 
 OBJECTID string
 OBJECTID and
 OBJECTID string
 '-' 
 OBJECTID to
 '-' 
 OBJECTID integer
 OBJECTID conversion
 OBJECTID routines
 '.' 
 TYPEID To
 OBJECTID use
 OBJECTID these
 OBJECTID routines
 ',' 
 OBJECTID either
 OBJECTID inherit
 OBJECTID them
 IN
 OBJECTID the
 CLASS
 OBJECTID where
 OBJECTID needed
 ',' 
 OBJECTID have
 OBJECTID a
 OBJECTID dummy
 OBJECTID variable
 OBJECTID bound
 OBJECTID to
 OBJECTID something
 OF
 OBJECTID type
 TYPEID A2I
 ',' 
 OBJECTID or
 OBJECTID simpl
 OBJECTID write
 LPAREN
 NEW
 TYPEID A2I
 RPAREN
 '.' 
 OBJECTID method
 LPAREN
 OBJECTID argument
 RPAREN
 '.' 
 ERROR "Unmatched *)"
 LPAREN
 '*' 
 OBJECTID c2i
 TYPEID Converts
 OBJECTID a
 INT_CONST 1
 '-' 
 OBJECTID character
 OBJECTID string
 OBJECTID to
 OBJECTID an
 OBJECTID integer
 '.' 
 TYPEID Aborts
 IF
 OBJECTID the
 OBJECTID string
 OBJECTID is
 NOT
 STR_CONST "0"
 OBJECTID through
 STR_CONST "9"
 ERROR "Unmatched *)"
 CLASS
 TYPEID A2I
 LBRACE
 OBJECTID c2i
 LPAREN
 OBJECTID char
 ':' 
 TYPEID String
 RPAREN
 ':' 
 TYPEID Int
 LBRACE
 IF
 OBJECTID char
 '=' 
 STR_CONST "0"
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "1"
 THEN
 INT_CONST 1
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "2"
 THEN
 INT_CONST 2
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "3"
 THEN
 INT_CONST 3
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "4"
 THEN
 INT_CONST 4
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "5"
 THEN
 INT_CONST 5
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "6"
 THEN
 INT_CONST 6
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "7"
 THEN
 INT_CONST 7
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "8"
 THEN
 INT_CONST 8
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "9"
 THEN
 INT_CONST 9
 ELSE
 LBRACE
 OBJECTID abort
 LPAREN
 RPAREN
 ';' 
 INT_CONST 0
 ';' 
 RBRACE
 LPAREN
 '*' 
 OBJECTID the
 INT_CONST 0
 OBJECTID is
 OBJECTID needed
 OBJECTID to
 OBJECTID satisfy
 OBJECTID the
 OBJECTID typchecker
 ERROR "Unmatched *)"
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 RBRACE
 ';' 
 LPAREN
 '*' 
 OBJECTID i2c
 OBJECTID is
 OBJECTID the
 OBJECTID inverse
 OF
 OBJECTID c2i
 '.' 
 ERROR "Unmatched *)"
 OBJECTID i2c
 LPAREN
 OBJECTID i
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID String
 LBRACE
 IF
 OBJECTID i
 '=' 
 INT_CONST 0
 THEN
 STR_CONST "0"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 1
 THEN
 STR_CONST "1"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 2
 THEN
 STR_CONST "2"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 3
 THEN
 STR_CONST "3"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 4
 THEN
 STR_CONST "4"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 5
 THEN
 STR_CONST "5"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 6
 THEN
 STR_CONST "6"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 7
 THEN
 STR_CONST "7"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 8
 THEN
 STR_CONST "8"
 ELSE
 IF
 OBJECTID i
 '=' 
 INT_CONST 9
 THEN
 STR_CONST "9"
 ELSE
 LBRACE
 OBJECTID abort
 LPAREN
 RPAREN
 ';' 
 STR_CONST ""
 ';' 
 RBRACE
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 RBRACE
 ';' 
 LPAREN
 '*' 
 OBJECTID a2i
 OBJECTID converts
 OBJECTID an
 TYPEID ASCII
 OBJECTID string
 OBJECTID into
 OBJECTID an
 OBJECTID integer
 '.' 
 TYPEID The
 OBJECTID empty
 OBJECTID string
 OBJECTID is
 OBJECTID converted
 OBJECTID to
 INT_CONST 0
 '.' 
 TYPEID Signed
 OBJECTID and
 OBJECTID unsigned
 OBJECTID strings
 OBJECTID are
 OBJECTID handled
 '.' 
 TYPEID The
 OBJECTID method
 OBJECTID aborts
 IF
 OBJECTID the
 OBJECTID string
 OBJECTID does
 NOT
 OBJECTID represent
 OBJECTID an
 OBJECTID integer
 '.' 
 TYPEID Very
 OBJECTID long
 OBJECTID strings
 OF
 OBJECTID digits
 OBJECTID produce
 OBJECTID strange
 OBJECTID answers
 OBJECTID because
 OF
 OBJECTID arithmetic
 OBJECTID overflow
 '.' 
 ERROR "Unmatched *)"
 OBJECTID a2i
 LPAREN
 OBJECTID s
 ':' 
 TYPEID String
 RPAREN
 ':' 
 TYPEID Int
 LBRACE
 IF
 OBJECTID s
 '.' 
 OBJECTID length
 LPAREN
 RPAREN
 '=' 
 INT_CONST 0
 THEN
 INT_CONST 0
 ELSE
 IF
 OBJECTID s
 '.' 
 OBJECTID substr
 LPAREN
 INT_CONST 0
 ',' 
 INT_CONST 1
 RPAREN
 '=' 
 STR_CONST "-"
 THEN
 '~' 
 OBJECTID a2i_aux
 LPAREN
 OBJECTID s
 '.' 
 OBJECTID substr
 LPAREN
 INT_CONST 1
 ',' 
 OBJECTID s
 '.' 
 OBJECTID length
 LPAREN
 RPAREN
 '-' 
 INT_CONST 1
 RPAREN
 RPAREN
 ELSE
 IF
 OBJECTID s
 '.' 
 OBJECTID substr
 LPAREN
 INT_CONST 0
 ',' 
 INT_CONST 1
 RPAREN
 '=' 
 STR_CONST "+"
 THEN
 OBJECTID a2i_aux
 LPAREN
 OBJECTID s
 '.' 
 OBJECTID substr
 LPAREN
 INT_CONST 1
 ',' 
 OBJECTID s
 '.' 
 OBJECTID length
 LPAREN
 RPAREN
 '-' 
 INT_CONST 1
 RPAREN
 RPAREN
 ELSE
 OBJECTID a2i_aux
 LPAREN
 OBJECTID s
 RPAREN
 FI
 FI
 FI
 RBRACE
 ';' 
 LPAREN
 '*' 
 OBJECTID a2i_aux
 OBJECTID converts
 OBJECTID the
 OBJECTID usigned
 OBJECTID portion
 OF
 OBJECTID the
 OBJECTID string
 '.' 
 TYPEID As
 OBJECTID a
 OBJECTID programming
 OBJECTID example
 ',' 
 OBJECTID this
 OBJECTID method
 OBJECTID is
 OBJECTID written
 OBJECTID iteratively
 '.' 
 ERROR "Unmatched *)"
 OBJECTID a2i_aux
 LPAREN
 OBJECTID s
 ':' 
 TYPEID String
 RPAREN
 ':' 
 TYPEID Int
 LBRACE
 LPAREN
 LET
 OBJECTID int
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 IN
 LBRACE
 LPAREN
 LET
 OBJECTID j
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID s
 '.' 
 OBJECTID length
 LPAREN
 RPAREN
 IN
 LPAREN
 LET
 OBJECTID i
 ':' 
 TYPEID Int
 ASSIGN
 INT_CONST 0
 IN
 WHILE
 OBJECTID i
 '<' 
 OBJECTID j
 LOOP
 LBRACE
 OBJECTID int
 ASSIGN
 OBJECTID int
 '*' 
 INT_CONST 10
 '+' 
 OBJECTID c2i
 LPAREN
 OBJECTID s
 '.' 
 OBJECTID substr
 LPAREN
 OBJECTID i
 ',' 
 INT_CONST 1
 RPAREN
 RPAREN
 ';' 
 OBJECTID i
 ASSIGN
 OBJECTID i
 '+' 
 INT_CONST 1
 ';' 
 RBRACE
 POOL
 RPAREN
 RPAREN
 ';' 
 OBJECTID int
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 LPAREN
 '*' 
 OBJECTID i2a
 OBJECTID converts
 OBJECTID an
 OBJECTID integer
 OBJECTID to
 OBJECTID a
 OBJECTID string
 '.' 
 TYPEID Positive
 OBJECTID and
 OBJECTID negative
 OBJECTID numbers
 OBJECTID are
 OBJECTID handled
 OBJECTID correctly
 '.' 
 ERROR "Unmatched *)"
 OBJECTID i2a
 LPAREN
 OBJECTID i
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID String
 LBRACE
 IF
 OBJECTID i
 '=' 
 INT_CONST 0
 THEN
 STR_CONST "0"
 ELSE
 IF
 INT_CONST 0
 '<' 
 OBJECTID i
 THEN
 OBJECTID i2a_aux
 LPAREN
 OBJECTID i
 RPAREN
 ELSE
 STR_CONST "-"
 '.' 
 OBJECTID concat
 LPAREN
 OBJECTID i2a_aux
 LPAREN
 OBJECTID i
 '*' 
 '~' 
 INT_CONST 1
 RPAREN
 RPAREN
 FI
 FI
 RBRACE
 ';' 
 LPAREN
 '*' 
 OBJECTID i2a_aux
 OBJECTID is
 OBJECTID an
 OBJECTID example
 OBJECTID using
 OBJECTID recursion
 '.' 
 ERROR "Unmatched *)"
 OBJECTID i2a_aux
 LPAREN
 OBJECTID i
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID String
 LBRACE
 IF
 OBJECTID i
 '=' 
 INT_CONST 0
 THEN
 STR_CONST ""
 ELSE
 LPAREN
 LET
 OBJECTID next
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID i
 '/' 
 INT_CONST 10
 IN
 OBJECTID i2a_aux
 LPAREN
 OBJECTID next
 RPAREN
 '.' 
 OBJECTID concat
 LPAREN
 OBJECTID i2c
 LPAREN
 OBJECTID i
 '-' 
 OBJECTID next
 '*' 
 INT_CONST 10
 RPAREN
 RPAREN
 RPAREN
 FI
 RBRACE
 ';' 
 RBRACE
 ';' 
 CLASS
 TYPEID Main
 INHERITS
 TYPEID IO
 LBRACE
 OBJECTID char
 ':' 
 TYPEID String
 ';' 
 OBJECTID avar
 ':' 
 TYPEID A
 ';' 
 OBJECTID a_var
 ':' 
 TYPEID A
 ';' 
 OBJECTID flag
 ':' 
 TYPEID Bool
 ASSIGN
 BOOL_CONST true
 ';' 
 OBJECTID menu
 LPAREN
 RPAREN
 ':' 
 TYPEID String
 LBRACE
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "\n\tTo add a number to "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "...enter a:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo negate "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "...enter b:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo find the difference between "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "and another number...enter c:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo find the factorial of "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "...enter d:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo square "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "...enter e:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo cube "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "...enter f:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo find out if "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "is a multiple of 3...enter g:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo divide "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "by 8...enter h:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo get a new number...enter j:\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\tTo quit...enter q:\n\n"
 RPAREN
 ';' 
 OBJECTID in_string
 LPAREN
 RPAREN
 ';' 
 RBRACE
 RBRACE
 ';' 
 OBJECTID prompt
 LPAREN
 RPAREN
 ':' 
 TYPEID String
 LBRACE
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "\n"
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "Please enter a number...  "
 RPAREN
 ';' 
 OBJECTID in_string
 LPAREN
 RPAREN
 ';' 
 RBRACE
 RBRACE
 ';' 
 OBJECTID get_int
 LPAREN
 RPAREN
 ':' 
 TYPEID Int
 LBRACE
 LBRACE
 LPAREN
 LET
 OBJECTID z
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 LPAREN
 LET
 OBJECTID s
 ':' 
 TYPEID String
 ASSIGN
 OBJECTID prompt
 LPAREN
 RPAREN
 IN
 OBJECTID z
 '.' 
 OBJECTID a2i
 LPAREN
 OBJECTID s
 RPAREN
 RPAREN
 RPAREN
 ';' 
 RBRACE
 RBRACE
 ';' 
 OBJECTID is_even
 LPAREN
 OBJECTID num
 ':' 
 TYPEID Int
 RPAREN
 ':' 
 TYPEID Bool
 LBRACE
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID Int
 ASSIGN
 OBJECTID num
 IN
 IF
 OBJECTID x
 '<' 
 INT_CONST 0
 THEN
 OBJECTID is_even
 LPAREN
 '~' 
 OBJECTID x
 RPAREN
 ELSE
 IF
 INT_CONST 0
 '=' 
 OBJECTID x
 THEN
 BOOL_CONST true
 ELSE
 IF
 INT_CONST 1
 '=' 
 OBJECTID x
 THEN
 BOOL_CONST false
 ELSE
 OBJECTID is_even
 LPAREN
 OBJECTID x
 '-' 
 INT_CONST 2
 RPAREN
 FI
 FI
 FI
 RPAREN
 RBRACE
 ';' 
 OBJECTID class_type
 LPAREN
 OBJECTID var
 ':' 
 TYPEID A
 RPAREN
 ':' 
 TYPEID SELF_TYPE
 LBRACE
 CASE
 OBJECTID var
 OF
 OBJECTID a
 ':' 
 TYPEID A
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Class type is now A\n"
 RPAREN
 ';' 
 OBJECTID b
 ':' 
 TYPEID B
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Class type is now B\n"
 RPAREN
 ';' 
 OBJECTID c
 ':' 
 TYPEID C
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Class type is now C\n"
 RPAREN
 ';' 
 OBJECTID d
 ':' 
 TYPEID D
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Class type is now D\n"
 RPAREN
 ';' 
 OBJECTID e
 ':' 
 TYPEID E
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Class type is now E\n"
 RPAREN
 ';' 
 OBJECTID o
 ':' 
 TYPEID Object
 DARROW
 OBJECTID out_string
 LPAREN
 STR_CONST "Oooops\n"
 RPAREN
 ';' 
 ESAC
 RBRACE
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID var
 ':' 
 TYPEID A
 RPAREN
 ':' 
 TYPEID SELF_TYPE
 LBRACE
 LPAREN
 LET
 OBJECTID z
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 LBRACE
 OBJECTID out_string
 LPAREN
 OBJECTID z
 '.' 
 OBJECTID i2a
 LPAREN
 OBJECTID var
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST " "
 RPAREN
 ';' 
 RBRACE
 RPAREN
 RBRACE
 ';' 
 OBJECTID main
 LPAREN
 RPAREN
 ':' 
 TYPEID Object
 LBRACE
 LBRACE
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID A
 RPAREN
 ';' 
 WHILE
 OBJECTID flag
 LOOP
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "number "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 IF
 OBJECTID is_even
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 THEN
 OBJECTID out_string
 LPAREN
 STR_CONST "is even!\n"
 RPAREN
 ELSE
 OBJECTID out_string
 LPAREN
 STR_CONST "is odd!\n"
 RPAREN
 FI
 ';' 
 OBJECTID class_type
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID char
 ASSIGN
 OBJECTID menu
 LPAREN
 RPAREN
 ';' 
 IF
 OBJECTID char
 '=' 
 STR_CONST "a"
 THEN
 LBRACE
 OBJECTID a_var
 ASSIGN
 LPAREN
 NEW
 TYPEID A
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID get_int
 LPAREN
 RPAREN
 RPAREN
 ';' 
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID B
 RPAREN
 '.' 
 OBJECTID method2
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 ',' 
 OBJECTID a_var
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ';' 
 RBRACE
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "b"
 THEN
 CASE
 OBJECTID avar
 OF
 OBJECTID c
 ':' 
 TYPEID C
 DARROW
 OBJECTID avar
 ASSIGN
 OBJECTID c
 '.' 
 OBJECTID method6
 LPAREN
 OBJECTID c
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ';' 
 OBJECTID a
 ':' 
 TYPEID A
 DARROW
 OBJECTID avar
 ASSIGN
 OBJECTID a
 '.' 
 OBJECTID method3
 LPAREN
 OBJECTID a
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ';' 
 OBJECTID o
 ':' 
 TYPEID Object
 DARROW
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "Oooops\n"
 RPAREN
 ';' 
 OBJECTID abort
 LPAREN
 RPAREN
 ';' 
 INT_CONST 0
 ';' 
 RBRACE
 ';' 
 ESAC
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "c"
 THEN
 LBRACE
 OBJECTID a_var
 ASSIGN
 LPAREN
 NEW
 TYPEID A
 RPAREN
 '.' 
 OBJECTID set_var
 LPAREN
 OBJECTID get_int
 LPAREN
 RPAREN
 RPAREN
 ';' 
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID D
 RPAREN
 '.' 
 OBJECTID method4
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 ',' 
 OBJECTID a_var
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ';' 
 RBRACE
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "d"
 THEN
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID C
 RPAREN
 '@' 
 TYPEID A
 '.' 
 OBJECTID method5
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "e"
 THEN
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID C
 RPAREN
 '@' 
 TYPEID B
 '.' 
 OBJECTID method5
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "f"
 THEN
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID C
 RPAREN
 '@' 
 TYPEID C
 '.' 
 OBJECTID method5
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "g"
 THEN
 IF
 LPAREN
 LPAREN
 NEW
 TYPEID D
 RPAREN
 '.' 
 OBJECTID method7
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 RPAREN
 THEN
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "number "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "is divisible by 3.\n"
 RPAREN
 ';' 
 RBRACE
 ELSE
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "number "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "is not divisible by 3.\n"
 RPAREN
 ';' 
 RBRACE
 FI
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "h"
 THEN
 LPAREN
 LET
 OBJECTID x
 ':' 
 TYPEID A
 IN
 LBRACE
 OBJECTID x
 ASSIGN
 LPAREN
 NEW
 TYPEID E
 RPAREN
 '.' 
 OBJECTID method6
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 ';' 
 LPAREN
 LET
 OBJECTID r
 ':' 
 TYPEID Int
 ASSIGN
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 '-' 
 LPAREN
 OBJECTID x
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 '*' 
 INT_CONST 8
 RPAREN
 RPAREN
 IN
 LBRACE
 OBJECTID out_string
 LPAREN
 STR_CONST "number "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID avar
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "is equal to "
 RPAREN
 ';' 
 OBJECTID print
 LPAREN
 OBJECTID x
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "times 8 with a remainder of "
 RPAREN
 ';' 
 LPAREN
 LET
 OBJECTID a
 ':' 
 TYPEID A2I
 ASSIGN
 NEW
 TYPEID A2I
 IN
 LBRACE
 OBJECTID out_string
 LPAREN
 OBJECTID a
 '.' 
 OBJECTID i2a
 LPAREN
 OBJECTID r
 RPAREN
 RPAREN
 ';' 
 OBJECTID out_string
 LPAREN
 STR_CONST "\n"
 RPAREN
 ';' 
 RBRACE
 RPAREN
 ';' 
 RBRACE
 RPAREN
 ';' 
 OBJECTID avar
 ASSIGN
 OBJECTID x
 ';' 
 RBRACE
 RPAREN
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "j"
 THEN
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID A
 RPAREN
 ELSE
 IF
 OBJECTID char
 '=' 
 STR_CONST "q"
 THEN
 OBJECTID flag
 ASSIGN
 BOOL_CONST false
 ELSE
 OBJECTID avar
 ASSIGN
 LPAREN
 NEW
 TYPEID A
 RPAREN
 '.' 
 OBJECTID method1
 LPAREN
 OBJECTID avar
 '.' 
 OBJECTID value
 LPAREN
 RPAREN
 RPAREN
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 FI
 ';' 
 RBRACE
 POOL
 ';' 
 RBRACE
 RBRACE
 ';' 
 RBRACE
 ';'